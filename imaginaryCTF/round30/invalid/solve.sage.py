

# This file was *autogenerated* from the file solve.sage
from sage.all_cmdline import *   # import sage library

_sage_const_2 = Integer(2); _sage_const_256 = Integer(256); _sage_const_4294968273 = Integer(4294968273); _sage_const_0 = Integer(0); _sage_const_7 = Integer(7); _sage_const_115792089237316195423570985008687907852598652813156864395638497411212089444244 = Integer(115792089237316195423570985008687907852598652813156864395638497411212089444244); _sage_const_4 = Integer(4); _sage_const_3 = Integer(3); _sage_const_20412485227 = Integer(20412485227); _sage_const_83380711482738671590122559 = Integer(83380711482738671590122559); _sage_const_5669387787833452836421905244327672652059 = Integer(5669387787833452836421905244327672652059); _sage_const_115792089237316195423570985008687907853702405052206223696310004874299507848991 = Integer(115792089237316195423570985008687907853702405052206223696310004874299507848991); _sage_const_9 = Integer(9); _sage_const_169 = Integer(169); _sage_const_3319 = Integer(3319); _sage_const_22639 = Integer(22639); _sage_const_1013176677300131846900870239606035638738100997248092069256697437031 = Integer(1013176677300131846900870239606035638738100997248092069256697437031); _sage_const_115792089237316195423570985008687907853031073199722524052490918277602762621571 = Integer(115792089237316195423570985008687907853031073199722524052490918277602762621571); _sage_const_109903 = Integer(109903); _sage_const_12977017 = Integer(12977017); _sage_const_383229727 = Integer(383229727); _sage_const_211853322379233867315890044223858703031485253961775684523 = Integer(211853322379233867315890044223858703031485253961775684523); _sage_const_115792089237316195423570985008687907853508896131558604026424249738214906721757 = Integer(115792089237316195423570985008687907853508896131558604026424249738214906721757); _sage_const_199 = Integer(199); _sage_const_18979 = Integer(18979); _sage_const_5128356331187950431517 = Integer(5128356331187950431517); _sage_const_1992751017769525324118900703535975744264170999967 = Integer(1992751017769525324118900703535975744264170999967); _sage_const_115792089237316195423570985008687907853941316518124263683276670604605579899084 = Integer(115792089237316195423570985008687907853941316518124263683276670604605579899084); _sage_const_49 = Integer(49); _sage_const_10903 = Integer(10903); _sage_const_5290657 = Integer(5290657); _sage_const_10833080827 = Integer(10833080827); _sage_const_22921299619447 = Integer(22921299619447); _sage_const_41245443549316649091297836755593555342121 = Integer(41245443549316649091297836755593555342121); _sage_const_115792089237316195423570985008687907852837564279074904382605163141518161494337 = Integer(115792089237316195423570985008687907852837564279074904382605163141518161494337); _sage_const_1 = Integer(1); _sage_const_50 = Integer(50); _sage_const_230 = Integer(230)
import os
os.environ['PWNLIB_NOTERM'] = '1'
from Crypto.Util.number import *
from pwn import remote
from main import Curve, Point
# nc puzzler7.imaginaryctf.org 9003
p = _sage_const_2 **_sage_const_256  - _sage_const_4294968273 
a = _sage_const_0 
b = _sage_const_7 

def dump(G, point, prime, b):
    print('dumping', b)
    gx, gy = G.xy()
    px, py = point
    with open('dump.txt', 'a') as f:
        f.write(f'bs.append({b})\n')
        f.write(f'primes.append({prime})\n')
        f.write(f'dlogs.append((({gx}, {gy}), ({px}, {py})))\n')


def getPoint(x, y):
    r = remote('puzzler7.imaginaryctf.org', int('9003'), level='error')
    r.recvuntil(b'x = ')
    r.sendline(str(x).encode())
    r.recvuntil(b'y = ')
    r.sendline(str(y).encode())
    r.recvuntil(b'x = ')
    x = int(r.recvline().decode())
    r.recvuntil(b'y = ')
    y = int(r.recvline().decode())
    r.close()
    return (x, y)

def getPointDebug(x, y):
    m = int.from_bytes(b'ictf{REDACTED}', 'big')
    E = Curve(p, a, b)
    P = Point(E, x, y)
    Q = m * P
    return Q.x, Q.y

factormap = {
    _sage_const_115792089237316195423570985008687907852598652813156864395638497411212089444244 : [
        _sage_const_4 , _sage_const_3 , _sage_const_20412485227 , _sage_const_83380711482738671590122559 , _sage_const_5669387787833452836421905244327672652059 
    ],
    _sage_const_115792089237316195423570985008687907853702405052206223696310004874299507848991 : [
        _sage_const_9 , _sage_const_169 , _sage_const_3319 , _sage_const_22639 , _sage_const_1013176677300131846900870239606035638738100997248092069256697437031 
    ],
    _sage_const_115792089237316195423570985008687907853031073199722524052490918277602762621571 : [
        _sage_const_109903 , _sage_const_12977017 , _sage_const_383229727 , _sage_const_211853322379233867315890044223858703031485253961775684523 
    ],
    _sage_const_115792089237316195423570985008687907853508896131558604026424249738214906721757 : [
        _sage_const_3 , _sage_const_199 , _sage_const_18979 , _sage_const_5128356331187950431517 , _sage_const_1992751017769525324118900703535975744264170999967 
    ],
    _sage_const_115792089237316195423570985008687907853941316518124263683276670604605579899084 : [
        _sage_const_4 , _sage_const_49 , _sage_const_10903 , _sage_const_5290657 , _sage_const_10833080827 , _sage_const_22921299619447 , _sage_const_41245443549316649091297836755593555342121 
    ],
    _sage_const_115792089237316195423570985008687907852837564279074904382605163141518161494337 :[
        _sage_const_115792089237316195423570985008687907852837564279074904382605163141518161494337 
    ]

}

blacklist = [_sage_const_3 ]

b = _sage_const_0 
def solveDL():
    global b
    b += _sage_const_1 
    E = EllipticCurve(GF(p), [a, b])
    order = E.order()
    valid = factormap.get(order, None)

    if not valid:
        # print('bad b value... retry', b)
        return solveDL()

    ret = []
    for prime in valid:
        if prime in primes or prime > _sage_const_2 **_sage_const_50  or prime in blacklist:
            continue
        try:
            # print(prime, E)
            # point = getPointDebug(*G.xy())
            G = E.gen(_sage_const_0 ) * int(order / prime)
            point = getPoint(*G.xy())
            P = E(point)
            log = G.discrete_log(P)
            print('prime:', prime, 'dlog:', log)
            ret.append((log, prime))
        except Exception as e:
            print(e)
            continue

    return ret




dlogs = []
primes = []
total = _sage_const_1 
while True:
    sols = solveDL()
    if sols is None:
        print('failed discrete log')
        continue

    for s in sols:
        dlogs.append(s[_sage_const_0 ])
        primes.append(s[_sage_const_1 ])
        total *= s[_sage_const_1 ]
    
    if total > _sage_const_2 **_sage_const_230 :
        test = CRT(dlogs, primes)
        print('test:', test)
        print('total:', total)
        print('primes:', primes)
        print('dlogs:', dlogs)

    if total > _sage_const_2 **_sage_const_256 :
        break

