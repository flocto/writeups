from Crypto.Cipher import AES
from Crypto.Util.number import *
from hashlib import sha256

def H(msg):
    return int.from_bytes(sha256(msg).digest(), 'big')

p = 4069937001870309288805965623396322384563730096882100588604666667233844487430163449354230919
g = 761690225239056989296458587964224591636809672476899126096331568501041989927462775870169890
y = 3856861197249284776013625513455404101895073264721385255129856925979499627575330256789520929
ms = (b'jctf{Puzzler_is_the_best_chall_author}', b'jctf{Wanna_see_you_trying_to_submit_that_flag}',
      b'jctf{D54_15_345y_4f73r_411}', b'jctf{n0_1d34}', b'jctf{s0_m4ny_fr33_s1g5}')
sigs = [(1234430664392743787630257388031047316821997031330839787382441766516744619882845371726433479, 883478467757628095229081460742191979896216430167019471897971078418352645136586828118018700), (1748400176200042123708476874280571916114895811026970462791925292863342243844069518123907016, 393625149677662932332357187873198135230656251678930039756678249504827719418549587156831030), (1389075138169306899495492856357153773415775002452775291705585460821530722304723598929266862,
                                                                                                                                                                                                                                                                                                                                                                                               781915465391184160994575003284903630852258678840377022165602064887288442417369465674198668), (1958157337340217176576113705810981137211234690293204330010317484823551198693733909083899867, 10566518658730065027243448201854036747278182399783616747373412863391884773803402507423867), (1502061706004805503203955848190130172580944756057566524292292418223793543600715005832239986, 1945316551688445103622226632281070969908748063265509793926846008296447432175736848474050566)]
c = '3c5f1079e0d30abf35d059ffea0ac6b460c1cd372d5622ede50df037f733015f'

q = (p - 1) // 2
bound = q >> 100

msgs = []
for i in range(len(ms)):
    m = ms[i]
    r, s = sigs[i]

    t = r * pow(s, -1, q) % q
    u = -H(m) * pow(s, -1, q) % q
    # assert t * pow(u, -1, q) % q == -r * pow(H(m), -1, q) % q
    # xt - u = k
    # k is bounded q << 100 -> we know last 100 bits of k

    msgs.append((m, t, u))

mat = [[0] * len(msgs) for _ in range(len(msgs))]
for i in range(len(msgs)):
    mat[i][i] = q
    mat[i] += [0] * 2  # padding for sT and sU

ts, us = [m[1] for m in msgs], [m[2] for m in msgs]
ts += [bound/q, 0]  # sT
us += [0, bound]  # sU
mat += [ts, us]

mat = matrix(QQ, mat)
show(mat)
mat = mat.LLL()
show(mat)


k = 0
for row in mat.rows():
    if row[-1] == bound:
        k = -row[0]
        break

r, s = sigs[0]
h = H(ms[0])

s = (s - h / k) % q
x = (s * k / r) % q
assert pow(g, x, p) == y

aes = AES.new(long_to_bytes(x)[:16], AES.MODE_CBC, b'\x00' * 16)
c = bytes.fromhex(c)

print(aes.decrypt(c))
